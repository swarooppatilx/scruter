// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id   String  @id @default(uuid()) @map("_id")
  name String?

  email String? @unique
  otp   String?
  role  String  @default("admin")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model User {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  email     String   @unique
  otp       String?
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Many-to-many relationship with Listing via Bookmark
  bookmarks Bookmark[] @relation("UserBookmarks")
}

model Seller {
  id        String    @id @default(uuid()) @map("_id")
  name      String
  email     String    @unique
  otp       String?
  role      String    @default("Seller")
  Listings  Listing[] @relation("SellerToListing")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum Category {
  Housing
  Fooding
  For_Sale
}

model Listing {
  id          String   @id @default(uuid()) @map("_id")
  SellerId    String
  Seller      Seller   @relation("SellerToListing", fields: [SellerId], references: [id])
  name        String
  price       Int
  description String
  category    Category
  images      Image[]
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  listingLat Float? @default(28.61)
  listingLng Float? @default(77.23)

  // Many-to-many relationship with User via Bookmark
  bookmarks Bookmark[] @relation("UserBookmarks")
}

model Image {
  id        String   @id @default(uuid()) @map("_id")
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bookmark {
  id        String  @id @default(uuid()) @map("_id")
  userId    String
  listingId String
  user      User    @relation("UserBookmarks", fields: [userId], references: [id])
  listing   Listing @relation("UserBookmarks", fields: [listingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, listingId]) // Ensures a user can only bookmark a listing once
}

model Question {
  id        String   @id @default(cuid()) @map("_id")
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answers   Answer[] @relation("QuestionAnswers") // Removed onDelete: Cascade from here
  answered  Boolean  @default(false)
}

model Answer {
  id         String   @id @default(cuid()) @map("_id")
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  questionId String
  question   Question @relation("QuestionAnswers", fields: [questionId], references: [id], onDelete: Cascade) // Moved onDelete: Cascade to this side
}
